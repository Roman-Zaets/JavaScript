// - створити функцію яка виводить масив

// let arr = [1, false, 5, 'Hello'];
// function arrF(a) {
//     console.log(a);
// }
// arrF(arr);

// - створити функцію яка заповнює масив рандомними числами та виводить його. Для виведення використати попвередню функцію.

// let emptyArr = [];
// function emptyArrF() {
//     for (let i = 0; i < 10; i++) {
//         n = Math.round(Math.random() * 100);
//         emptyArr.push(n);
//     }
//     arrF(emptyArr);
// }
// emptyArrF();

// - створити функцію яка приймає три числа та виводить та повертає найменьше.

// function numbersMin(a, b, c) {
//     if (a < b && a < c) {
//         console.log(a);
//     }
//     else if (b < a && b < c) {
//         console.log(b);
//     }
//     else {
//         console.log(c);
//     }
// }
// numbersMin(5, 22 ,11);

// - створити функцію яка приймає три числа та виводить та повертає найбільше.

// function numbersMax(a, b, c) {
//     if (a > b && a > c) {
//         console.log(a);
//     }
//     else if (b > a && b > c) {
//         console.log(b);
//     }
//     else {
//         console.log(c);
//     }
// }
// numbersMax(5, 22 ,31);

// - створити функцію яка приймає будь-яку кількість чисел, повертає найменьше, а виводить найбільше

// function arg() {
//     let max = Math.max.apply(Math, arguments);
//     console.log(max)
//
//     let min = Math.min.apply(Math, arguments);
//     return min;
// }
// arg(5, 27, 19, 12);

// - створити функцію яка виводить масив

// let arr = [1, false, 5, 'Hello'];
// function arrF(a) {
//     console.log(a);
// }
// arrF(arr);

// - створити функцію яка повертає найбільше число з масиву

// let num = [90, 23, 8, 120, 7, 45];
// function maxNum() {
//     let max = Math.max.apply(Math, num);
//     console.log(max);
//     return max;
// }
// maxNum();

// - створити функцію яка повертає найменьше число з масиву

// let num = [90, 23, 8, 120, 7, 45];
// function minNum() {
//     let min = Math.min.apply(Math, num);
//     console.log(min);
//     return min;
// }
// minNum();

// - створити функцію яка приймає масив чисел та складає значення елементів масиву та повертає його.

// let num = [90, 23, 8, 121, 7, 45];
// function numSum(array) {
//     let sum = 0;
//     for (let i = 0; i < array.length; i++) {
//         sum += array[i];
//     }
//     console.log(sum);
//     return sum;
// }
// numSum(num);

// - створити функцію яка приймає масив чисел та повертає середнє арифметичне його значень.

// let num = [90, 23, 8, 121, 7, 45];
// function numSum(array) {
//     let sum = 0;
//     for (let i = 0; i < array.length; i++) {
//         sum += array[i];
//     }
//     let x = sum / array.length;
//     console.log(x);
//     return x;
// }
// numSum(num);

// - Створити функцію яка приймає масив будь яких объектів, та повертає значення кількості об'єктів в масиві

// let usersWithId = [
//     {id: 1, name: 'vasya', age: 31, status: false},
//     {id: 2, name: 'petya', age: 30, status: true},
//     {id: 3, name: 'kolya', age: 29, status: true},
//     {id: 4, name: 'olya', age: 28, status: false},
// ];
//
// function count(array) {
//     console.log(array.length);
//     return array.length;
// };
// count(usersWithId);

// - Створити функцію яка приймає масив будь яких объектів, та повертає загальн кількість полів в них

let usersWithId = [
    {id: 1, name: 'vasya', age: 31, status: false},
    {id: 2, name: 'petya', age: 30, status: true},
    {id: 3, name: 'kolya', age: 29, status: true},
    {id: 4, name: 'olya', age: 28, status: false},
];

let sum = 0;
for (let i = 0; i < usersWithId.length; i++) {
    for (let xxx in usersWithId[i]) {
        let x = sum += usersWithId[i].length;
    }
}
console.log(sum)

// function count(array) {
//     let sum = 0;
//     for (let i = 0; i < array.length; i++) {
//         let x = sum += array[i].length;
//     }
//     console.log(sum)
// };
// count(usersWithId);

// - створити функцію  яка скаладає значення елементів з однаковими індексами  та повертає новий результуючий масив.
//     Приклад
//     [1,2,3,4]
//     [2,3,4,5]
// результат
//     [3,5,7,9]
// - *** приймає масив та число "i", та міняє місцями об`єкт який знаходиться в індексі "i" на "i+1"
// - *** створити функцію яка буде переносити елементи з значенням 0 у кінець маисву. Зберігаючи при цьому порядок не нульових значень.
// Двожина масиву від 2 до 100
// Приклад
// [1,0,6,0,3] => [1,6,3,0,0]
// [0,1,2,3,4] => [1,2,3,4,0]
// [0,0,1,0]   => [1,0,0,0]
//
// Створити функцію яка :
// - Додає в боді блок з текстом "Hello owu"
// - Додає в боді елемент з текстом . Тип елементу та текст отримати через аргументи
// - приймає масив автомобілів (можна взяти з попередніх дз ),та  індентифікатор елемнту в який потрібно додати список цих автомобілів.
// Для кожного автомобіля створити свій блок, та додати його в елемент, індентифікатор якого ви отримали. Всі властивості авто в обному блоці
// - приймає масив автомобілів (можна взяти з попередніх дз ),та  індентифікатор елемнту в який потрібно додати список цих автомобілів.
// Для кожного автомобіля створити свій блок, та додати його в елемент, індентифікатор якого ви отримали.
// Для кожної властивості створити всередені блока автомоблія свій блок
//
// (на основі минулого ДЗ)
// **- функція приймає 2 масиви з рівною кількістю об'єктів та з'єднює в один об'єкт користувача та місто з відповідними "id" та "user_id",
// та повертає масив цих з'єднаних об'єктів.
// Приклад масивів:
//             let usersWithId = [{id: 1, name: 'vasya', age: 31, status: false}, {id: 2, name: 'petya', age: 30, status: true}, {id: 3, name: 'kolya', age: 29, status: true}, {id: 4, name: 'olya', age: 28, status: false},];
//             let citiesWithId = [{user_id: 3, country: 'USA', city: 'Portland'}, {user_id: 1, country: 'Ukraine', city: 'Ternopil'}, {user_id: 2, country: 'Poland', city: 'Krakow'}, {user_id: 4, country: 'USA', city: 'Miami'},];
// Частковий приклад реультату:
//
//
//
// ***- беремо завдання з правилами з укроку №3 :
// Та робимо це функцією.При цьому правила отримувати через аргумент.
// "Є масив котрий характеризує правила. Створити скрипт який ітерує цей масив, та робить з кожне правило в окремому блоці.
// При цому в блоці, номер правила записати в свій блок, текст правила записати в свій окремий блок.
// Результатом відпрацювання скріпта повинна бути структура яка міститься в блоці wrap файла rule.html
// //todo add rules
//
// 			let rules = [
// 				{
// 					title: 'Первое правило Бойцовского клуба.',
// 					body: 'Никому не рассказывать о Бойцовском клубе.'
// 				},
// 				{
// 					title: 'Второе правило Бойцовского клуба.',
// 					body: 'Никогда никому не рассказывать о Бойцовском клубе.'
// 				},
// 				{
// 					title: 'Третье правило Бойцовского клуба.',
// 					body: 'В схватке участвуют только двое.'
// 				},
// 				{
// 					title: 'Четвертое правило Бойцовского клуба.',
// 					body: 'Не более одного поединка за один раз.'
// 				},
// 				{
// 					title: 'Пятое правило Бойцовского клуба.',
// 					body: 'Бойцы сражаются без обуви и голые по пояс.'
// 				},
// 				{
// 					title: 'Шестое правило Бойцовского клуба.',
// 					body: 'Поединок продолжается столько, сколько потребуется.'
// 				},
// 				{
// 					title: 'Седьмое правило Бойцовского клуба.',
// 					body: 'Если противник потерял сознание или делает вид, что потерял, или говорит «Хватит» — поединок окончен.'
// 				},
// 				{
// 					title: 'Восьмое и последнее правило Бойцовского клуба.',
// 					body: 'Новичок обязан принять бой.'
// 				},
//
// 			];
// "
